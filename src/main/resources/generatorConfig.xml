<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--导入属性配置 -->
    <properties resource="dbConfig.properties"/>
    <!--指定特定数据库的jdbc驱动jar包的位置：使用本地mysql驱动路径-->
    <classPathEntry location="E:\apache-maven-3.3.9\conf\repository\mysql\mysql-connector-java\5.1.38\mysql-connector-java-5.1.38.jar"/>
    <context id="context" targetRuntime="MyBatis3">
        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator>
            <property name="suppressAllComments" value="false"/>
            <property name="suppressDate" value="true"/>
        </commentGenerator>
        <!--jdbc的数据库连接 -->
        <jdbcConnection driverClass="${jdbc.driverClass}" connectionURL="${jdbc.jdbcUrl}" userId="${jdbc.user}"
                        password="${jdbc.password}"/>
        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!--
            Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径(若不指定，则默认生成一个target文件夹)
        -->
        <javaModelGenerator targetPackage="com.alisn.rs.entity" targetProject="src\main\java">
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!--
            是否对model添加构造函数（一般不需要设置）
            <property name="constructorBased" value="true"/>
            建立的Model对象是否不可改变,即生成的Model对象不会有setter方法，只有getter和构造方法（一般不需要设置）
            <property name="immutable" value="true"/>
            给Model添加一个父类（一般不需要设置）
            <property name="rootClass" value="com.skynet.ssm.superclass.Hello"/>
            -->
        </javaModelGenerator>
        <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="com.alisn.rs.mapper" targetProject="src\main\java">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>
        <!--
            Dao层：客户端代码，生成易于使用的针对Model对象和XML配置文件的代码
            type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
            type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
            type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
       -->
        <javaClientGenerator targetPackage="com.alisn.rs.dao" targetProject="src\main\java" type="XMLMAPPER">
            <!--是否允许子包-->
            <property name="enableSubPackages" value="false"/>
            <!--
            定义Maper.java 源代码中的ByExample() 方法的可视性，
            可选的值有：public;private;protected;default
            注意：如果 targetRuntime="MyBatis3",此参数被忽略
            <property name="exampleMethodVisibility" value=""/>
            方法名计数器，在MyBatis3中已被忽略.
            <property name="methodNameCalculator" value=""/>
            为生成的接口添加父接口
            <property name="rootInterface" value=""/>
            -->
        </javaClientGenerator>
        <!--对应数据库表mysql可以加入主键自增 字段命名 忽略某字段等，注意：1.3.4后加入属性mapperName，可自定义映射文件的名称-->
        <table tableName="USER_INFO" domainObjectName="User" mapperName="UserDao"/>
    </context>
</generatorConfiguration>